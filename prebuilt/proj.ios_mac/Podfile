require 'fileutils'
require 'pathname'
require 'set'

cocos2d_x_dir = '../../'
header_files_dir = '../include'

abstract_target 'common' do
    pod 'cocos2d-x/cocos2dx_static', :path => cocos2d_x_dir
    
    target 'libcocos2d_prebuilt_desktop'
    target 'libcocos2d_prebuilt_mobile'
end

post_install do |installer|
    # Delete `include` directory.
    FileUtils.rm_rf(header_files_dir)
    
    installer.pods_project.targets.each do |target|
        is_osx = false
        
        # Check debug configuration is enough.
        if target.build_configurations[0].build_settings['SDKROOT'] == 'macosx'
           is_osx = true
        end
        
        # Find all header files in headers build phase.
        header_files = Set.new
        target.headers_build_phase.files_references.each do |file_ref|
            relative_path = (Pathname.new file_ref.real_path)
                .relative_path_from(
                    Pathname.new File.join(Dir.pwd, cocos2d_x_dir)).to_s
            header_files.add(relative_path)
        end
        
        # Remove the headers build phase because it copies header files without
        # preserving the directory paths.
        # `pod install` generates a lot of duplicated uuids.
        # target.build_phases.delete(target.headers_build_phase)
        
        # Manually recursively copy all files in cocos2d-x.
        header_pattern = '{cocos,extensions,external}/**/*.{h,hpp,inl}'
        Dir.glob(cocos2d_x_dir + header_pattern).each{|file|
            relative_path = (Pathname.new file)
                .relative_path_from(Pathname.new cocos2d_x_dir).to_s
            if header_files.include?(relative_path)
                output_path = File.join(
                    header_files_dir,
                    is_osx ? 'mac' : 'ios',
                    relative_path)
                FileUtils.mkdir_p(File.dirname(output_path))
                FileUtils.cp(file, output_path)
            end
        }
    end
end
