import org.apache.commons.io.FilenameUtils

apply plugin: 'com.android.application'

/// Modify this variable to build the desired architectures.
String[] architectures = [
        'armeabi',
        'armeabi-v7a',
        'x86'
]

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    flavorDimensions 'screenSize'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26

        applicationId 'org.cocos2dx.hellocpp'

        versionCode 1
        versionName '1.0.0'

        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                targets 'cocos2dcpp'
                arguments 'APP_STL=c++_static'
                arguments 'NDK_TOOLCHAIN_VERSION=clang'
                arguments 'APP_PLATFORM=android-14'
                arguments 'APP_LDFLAGS=-latomic'
                arguments '-j' + Runtime.runtime.availableProcessors()
                cppFlags '-frtti'
                cppFlags '-fexceptions'
                cppFlags '-fsigned-char'
                cppFlags '-U__SSE__'
                cppFlags '-Wno-extern-c-compat'
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include architectures
            universalApk false
        }
    }

    sourceSets {
        main {
            assets.srcDir '../../Resources'
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/libs'
        }
    }

    signingConfigs {
        release {
            // Use your key store information here.
            // keyAlias 'key_alias'
            // keyPassword 'key_password'
            // storeFile file('file_path')
            // storePassword 'store_password'
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true

            externalNativeBuild {
                ndkBuild {
                    arguments "NDK_OUT=$projectDir/src/main/obj/debug"
                    cppFlags '-DCOCOS2D_DEBUG=1'
                }
            }
        }
        release {
            // signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
            jniDebuggable false

            externalNativeBuild {
                ndkBuild {
                    arguments "NDK_OUT=$projectDir/src/main/obj/release"
                    cppFlags '-DNDEBUG'
                }
            }
        }
    }

    productFlavors {
        iphone {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "false",
                    largeScreens : "false",
                    normalScreens: "false",
                    smallScreens : "true",
            ]
        }
        iphonehd {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "false",
                    largeScreens : "true",
                    normalScreens: "true",
                    smallScreens : "false",
            ]
        }
        ipadhd {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "true",
                    largeScreens : "false",
                    normalScreens: "false",
                    smallScreens : "false",
            ]
        }
    }

    packagingOptions {
        // Exclude metadata files.
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

android.applicationVariants.all { variant ->
    // Remove unused resources.
    // https://stackoverflow.com/questions/28897450/exclude-assets-for-release-build-type
    variant.mergeAssets.doLast {
        def patterns = [
                'iphone'  : ['**/*iphonehd/**', '**/*ipadhd/**'],
                'iphonehd': ['**/*iphone/**', '**/*ipadhd/**'],
                'ipadhd'  : ['**/*iphone/**', '**/*iphonehd/**'],
        ]
        def flavorName = variant.productFlavors.get(0).name
        delete(fileTree(dir: variant.mergeAssets.outputDir, includes: patterns.get(flavorName)))
    }

    // Change version codes.
    variant.outputs.each { output ->
        def architecture = output.getFilter(com.android.build.OutputFile.ABI)
        String screenSize = null
        for (size in ['iphone', 'iphonehd', 'ipadhd'])
            if (output.baseName.contains(size)) {
                screenSize = size
            }
        def architectureVersionCodes = [
                'armeabi'    : 1,
                'armeabi-v7a': 2,
                'x86'        : 6
        ]
        def screenSizeVersionCodes = [
                'universal': '00',
                'iphone'   : '11',
                'iphonehd' : '23',
                'ipadhd'   : '44'
        ]

        // def flavor = variant.productFlavors.get(0)
        def versionCode = String.format('%d%s%s',
                android.defaultConfig.versionCode,
                architectureVersionCodes.get(architecture),
                screenSizeVersionCodes.get(screenSize)).toInteger()

        output.versionCodeOverride = versionCode

        // Change output filename.
        def packageName = android.defaultConfig.applicationId
        def versionName = android.defaultConfig.versionName
        def file = output.outputFile
        def name = file.getName()
        def baseName = FilenameUtils.getBaseName(name)
        def newName = String.format('%s-%s-%s-%d.apk', baseName, packageName, versionName, versionCode)
        output.outputFileName = newName
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')

    compile 'com.android.support:multidex:1.0.2'
}