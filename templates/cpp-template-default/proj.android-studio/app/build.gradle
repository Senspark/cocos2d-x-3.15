import org.apache.commons.io.FilenameUtils

apply plugin: 'com.android.application'

/// Modify this variable to build the desired architectures.
String[] architectures = ['armeabi', 'armeabi-v7a', 'x86']

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    flavorDimensions 'screenSize'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25

        applicationId 'org.cocos2dx.hellocpp'

        versionCode 1
        versionName '1.0.0'

        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                targets 'cocos2dcpp'

                arguments 'NDK_TOOLCHAIN_VERSION=clang'
                arguments 'APP_STL=c++_static'
                arguments 'APP_PLATFORM=android-9'
                arguments 'APP_LDFLAGS=-latomic'

                // Fix issue: https://stackoverflow.com/questions/43495127/gradle-android-single-ndk-build-for-multiple-flavors
                arguments "NDK_OUT=$projectDir/src/main/obj"
                arguments "NDK_LIBS_OUT=$projectDir/src/main/libs"

                // http://stackoverflow.com/questions/42579759/how-to-change-android-gradle-ndk-j-jobs-flag-value-for-clean-task
                arguments '-j' + Runtime.runtime.availableProcessors()

                cppFlags += '-frtti'
                cppFlags += '-fsigned-char'
            }
        }

        ndk {
            abiFilters architectures
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include architectures
            universalApk false
        }
    }

    sourceSets {
        main {
            assets.srcDir '../../Resources'
            jniLibs.srcDir 'src/main/libs'
        }
    }

    signingConfigs {
        release {
            // Use your key store information here.
            keyAlias 'key_alias'
            keyPassword 'key_password'
            storeFile file('file_path')
            storePassword 'store_password'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                    cppFlags += '-DNDEBUG'
                }
            }
        }
        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                    cppFlags += '-DCOCOS2D_DEBUG=1'
                }
            }
        }
    }

    productFlavors {
        iphone {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "false",
                    largeScreens : "false",
                    normalScreens: "false",
                    smallScreens : "true",
            ]
            aaptOptions {
                ignoreAssetsPattern '!.*:!*iphonehd:!*ipadhd'
            }
        }
        iphonehd {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "false",
                    largeScreens : "true",
                    normalScreens: "true",
                    smallScreens : "false",
            ]
            aaptOptions {
                ignoreAssetsPattern '!.*:!*iphone:!*ipadhd'
            }
        }
        ipadhd {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "true",
                    largeScreens : "false",
                    normalScreens: "false",
                    smallScreens : "false",
            ]
            aaptOptions {
                ignoreAssetsPattern '!.*:!*iphone:!*iphonehd'
            }
        }
    }

    packagingOptions {
        // Exclude metadata files.
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

android.applicationVariants.all { variant ->
    // Remove unaligned apks.
    variant.assemble.doLast {
        variant.outputs.each { output ->
            def file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains('unaligned')) {
                file.delete()
            }
        }
    }
    // Change version codes.
    variant.outputs.each { output ->
        def architecture = output.getFilter(com.android.build.OutputFile.ABI)
        String screenSize = null
        for (size in ['iphone', 'iphonehd', 'ipadhd'])
            if (output.baseName.contains(size)) {
                screenSize = size
            }
        def architectureVersionCodes = [
                'armeabi'    : 1,
                'armeabi-v7a': 2,
                'x86'        : 6
        ]
        def screenSizeVersionCodes = [
                'universal': '00',
                'iphone'   : '11',
                'iphonehd' : '23',
                'ipadhd'   : '44'
        ]

        // def flavor = variant.productFlavors.get(0)
        def versionCode = String.format('%d%s%s',
                android.defaultConfig.versionCode,
                architectureVersionCodes.get(architecture),
                screenSizeVersionCodes.get(screenSize)).toInteger();

        output.versionCodeOverride = versionCode;

        // Change output filename for aligned apks.
        if (variant.buildType.zipAlignEnabled) {
            def packageName = android.defaultConfig.applicationId
            def versionName = android.defaultConfig.versionName
            def file = output.outputFile
            def name = file.getName()
            def baseName = FilenameUtils.getBaseName(name)
            def directory = file.getParent()
            def newName = String.format('%s-%s-%s-%d.apk', baseName, packageName, versionName, versionCode)
            def newPath = String.format('%s/%s', directory, newName)
            output.outputFile = new File(newPath)
        }
    }
}

/// Fix issue where .so files are not copied to src/main/libs.
tasks.whenTaskAdded { task ->
    if (task.name.contains("externalNativeBuild")) {
        task.doLast {
            architectures.each { arch ->
                println "[$arch] Install : libcocos2dcpp.so => $projectDir/src/main/libs/$arch/libcocos2dcpp.so"
                exec {
                    // Create directories.
                    commandLine 'mkdir', '-p',
                            "$projectDir/src/main/libs/$arch"
                }
                exec {
                    // Copy while preserving timestamp.
                    commandLine 'install', '-p',
                            "$projectDir/src/main/obj/local/$arch/libcocos2dcpp.so",
                            "$projectDir/src/main/libs/$arch/libcocos2dcpp.so"
                }
                exec {
                    // Strip.
                    def stripToolchain = (arch == 'x86'
                            ? 'x86-4.9/prebuilt/darwin-x86_64/bin/i686-linux-android-strip'
                            : 'arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-strip')
                    commandLine "${project.android.ndkDirectory}/toolchains/$stripToolchain",
                            '--strip-unneeded',
                            "$projectDir/src/main/libs/$arch/libcocos2dcpp.so"
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')

    compile 'com.android.support:multidex:1.0.1'
}