import org.apache.commons.io.FilenameUtils

apply plugin: 'com.android.application'

/// Modify this variable to build the desired architectures.
String[] architectures = [
        'armeabi',
        'armeabi-v7a',
        'x86'
]

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    flavorDimensions 'screenSize'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25

        applicationId 'org.cocos2dx.hellocpp'

        versionCode 1
        versionName '1.0.0'

        multiDexEnabled true
    }

    splits {
        abi {
            enable true
            reset()
            include architectures
            universalApk false
        }
    }

    sourceSets {
        main {
            assets.srcDir '../../Resources'
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/libs'
        }
    }

    signingConfigs {
        release {
            // Use your key store information here.
            keyAlias 'key_alias'
            keyPassword 'key_password'
            storeFile file('file_path')
            storePassword 'store_password'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
            jniDebuggable false
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }

    productFlavors {
        iphone {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "false",
                    largeScreens : "false",
                    normalScreens: "false",
                    smallScreens : "true",
            ]
        }
        iphonehd {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "false",
                    largeScreens : "true",
                    normalScreens: "true",
                    smallScreens : "false",
            ]
        }
        ipadhd {
            dimension 'screenSize'
            manifestPlaceholders = [
                    xlargeScreens: "true",
                    largeScreens : "false",
                    normalScreens: "false",
                    smallScreens : "false",
            ]
        }
    }

    packagingOptions {
        // Exclude metadata files.
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

android.applicationVariants.all { variant ->
    // Remove unaligned apks.
    variant.assemble.doLast {
        variant.outputs.each { output ->
            def file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains('unaligned')) {
                file.delete()
            }
        }
    }

    // Remove unused resources.
    // https://stackoverflow.com/questions/28897450/exclude-assets-for-release-build-type
    variant.mergeAssets.doLast {
        def patterns = [
                'iphone'  : ['**/*iphonehd/**', '**/*ipadhd/**'],
                'iphonehd': ['**/*iphone/**', '**/*ipadhd/**'],
                'ipadhd'  : ['**/*iphone/**', '**/*iphonehd/**'],
        ]
        def flavorName = variant.productFlavors.get(0).name
        delete(fileTree(dir: variant.mergeAssets.outputDir, includes: patterns.get(flavorName)))
    }

    // Change version codes.
    variant.outputs.each { output ->
        def architecture = output.getFilter(com.android.build.OutputFile.ABI)
        String screenSize = null
        for (size in ['iphone', 'iphonehd', 'ipadhd'])
            if (output.baseName.contains(size)) {
                screenSize = size
            }
        def architectureVersionCodes = [
                'armeabi'    : 1,
                'armeabi-v7a': 2,
                'x86'        : 6
        ]
        def screenSizeVersionCodes = [
                'universal': '00',
                'iphone'   : '11',
                'iphonehd' : '23',
                'ipadhd'   : '44'
        ]

        // def flavor = variant.productFlavors.get(0)
        def versionCode = String.format('%d%s%s',
                android.defaultConfig.versionCode,
                architectureVersionCodes.get(architecture),
                screenSizeVersionCodes.get(screenSize)).toInteger();

        output.versionCodeOverride = versionCode;

        // Change output filename for aligned apks.
        if (variant.buildType.zipAlignEnabled) {
            def packageName = android.defaultConfig.applicationId
            def versionName = android.defaultConfig.versionName
            def file = output.outputFile
            def name = file.getName()
            def baseName = FilenameUtils.getBaseName(name)
            def directory = file.getParent()
            def newName = String.format('%s-%s-%s-%d.apk', baseName, packageName, versionName, versionCode)
            def newPath = String.format('%s/%s', directory, newName)
            output.outputFile = new File(newPath)
        }
    }
}

/// External C++ build.
tasks.whenTaskAdded { task ->
    def name = task.name
    def found = false
    ['iphone', 'iphonehd', 'ipadhd'].each { size ->
        ['debug', 'release'].each { mode ->
            if (!found) {
                if (name == "prepare${size.capitalize()}${mode.capitalize()}Dependencies") {
                    task.doFirst {
                        def ndkDir = android.ndkDirectory
                        def cppFlags = [
                                '-frtti',
                                '-fexceptions',
                                '-fsigned-char'
                        ]
                        if (mode == 'debug') {
                            cppFlags.add('-DCOCOS2D_DEBUG=1')
                        } else {
                            cppFlags.add('-DNDEBUG')
                        }
                        exec {
                            commandLine "$ndkDir/ndk-build",
                                    '-C', "$projectDir/src/main/jni",
                                    '-j', Runtime.runtime.availableProcessors(),
                                    'APP_STL=c++_static',
                                    'NDK_TOOLCHAIN_VERSION=clang',
                                    'APP_PLATFORM=android-9',
                                    'APP_LDFLAGS=-latomic',
                                    "APP_ABI=${architectures.join(' ')}",
                                    "APP_CPPFLAGS=${cppFlags.join(' ')}",
                                    'APP_CPPFLAGS+=-U__SSE__',
                                    "NDK_OUT=$projectDir/src/main/obj/$mode",
                                    "NDK_DEBUG=${(mode == 'debug') ? 1 : 0}"
                        }
                    }
                    found = true;
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')

    compile 'com.android.support:multidex:1.0.1'
}